{"version":3,"sources":["components/PokemonData.js","components/PokemonImage.js","containers/PokemonContainer.js","containers/App.js","serviceWorker.js","index.js"],"names":["PokemonImage","_ref","name","number","primaryType","secondaryType","previousEvolution","nextEvolution","height","weight","react_default","a","createElement","className","imageUrl","src","alt","PokemonContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","calculatePokemonNumber","pokemonList","initial_date","list","initialDate","numberList","iDate","Date","UTC","year","month","day","cDate","getFullYear","getMonth","getDate","Math","floor","_this2","fetch","then","results","json","data","type","types","slot","setState","_this3","length","evolves_from_species","_this4","_this5","fetchPokemon","getPrevEvolution","getNextEvolution","src_components_PokemonImage","components_PokemonData","Component","App","src_containers_PokemonContainer","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8311349a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PokemonData.css';\r\n\r\nconst PokemonImage = ({name, number, primaryType, secondaryType, previousEvolution, nextEvolution, height, weight}) => {\r\n  return(\r\n    <div className=\"data-container\">\r\n      <h2 className=\"p-name\">Pok√©mon of the Day: </h2>\r\n      <span className=\"name-span\">{name}</span>\r\n      <hr />\r\n      <p className=\"data-entry\">Number: <span className=\"data-span\">{number}</span></p>\r\n      <p className=\"data-entry\">Primary type: <span className=\"data-span\">{primaryType}</span></p>\r\n      <p className=\"data-entry\">Secondary type: <span className=\"data-span\">{secondaryType}</span></p>\r\n      <p className=\"data-entry\">Evolves from: <span className=\"data-span\">{previousEvolution}</span></p>\r\n      <p className=\"data-entry\">Evolves into: <span className=\"data-span\">{nextEvolution}</span></p>\r\n      <p className=\"data-entry\">Height: <span className=\"data-span\">{height}</span> m</p>\r\n      <p className=\"data-entry\">Weight: <span className=\"data-span\">{weight}</span> kg</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonImage;\r\n","import React from 'react';\r\nimport './PokemonImage.css';\r\n\r\nconst PokemonImage = ({number, name}) => {\r\n  let imageUrl = \"https://pokeres.bastionbot.org/images/pokemon/\"+number+\".png\"\r\n  return(\r\n    <div className=\"p-image-container\"><img src={imageUrl} alt={number + \" - \" + name} className=\"p-image\"/></div>\r\n  )\r\n}\r\n\r\nexport default PokemonImage;\r\n","import React, { Component, } from 'react';\r\nimport PokemonData from '../components/PokemonData';\r\nimport PokemonImage from '../components/PokemonImage';\r\nimport './PokemonContainer.css';\r\nimport './TypeStyling.css'\r\nimport pokemonList from '../pokemonList.json';\r\n\r\n\r\nclass PokemonContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: 'N/A',\r\n      number: this.calculatePokemonNumber(pokemonList.initial_date, pokemonList.list),\r\n      primaryType: 'N/A',\r\n      secondaryType: 'N/A',\r\n      previousEvolution: 'N/A',\r\n      nextEvolution: 'N/A',\r\n      height: 'N/A',\r\n      weight: 'N/A'\r\n    }\r\n  }\r\n\r\n  calculatePokemonNumber(initialDate, numberList) {\r\n    let iDate = new Date(Date.UTC(initialDate.year, initialDate.month-1, initialDate.day));\r\n    let cDate = new Date();\r\n    cDate = new Date(Date.UTC(cDate.getFullYear(), cDate.getMonth(), cDate.getDate()));\r\n    let chosenNumber = numberList[Math.floor((cDate-iDate)/(1000 * 60 * 60 * 24))];\r\n    return (chosenNumber);\r\n  }\r\n\r\n  fetchPokemon(number) {\r\n    let name = 'N/A';\r\n    let primaryType = 'N/A';\r\n    let secondaryType = 'N/A';\r\n    let height = '0';\r\n    let weight = '0';\r\n    return(fetch('https://pokeapi.co/api/v2/pokemon/' + number + '/')\r\n      .then(results => {\r\n        return results.json();\r\n      })\r\n      .then(data => {\r\n        for (let type in data.types) {\r\n          if (data.types[type].slot === 2) {\r\n            secondaryType = data.types[type].type.name;\r\n          } else {\r\n            primaryType = data.types[type].type.name;\r\n          }\r\n        }\r\n        height = data.height/10;\r\n        weight = data.weight/10;\r\n        name = data.name;\r\n        this.setState({name: name, height: height, weight: weight, secondaryType: secondaryType, primaryType: primaryType});\r\n      })\r\n    )\r\n  }\r\n\r\n  getNextEvolution(number) {\r\n    if (number < pokemonList.list.length) {\r\n      fetch('https://pokeapi.co/api/v2/pokemon-species/' + (number+1) + '/')\r\n      .then(results => {\r\n        return results.json();\r\n      })\r\n      .then(data => {\r\n        if (data.evolves_from_species && data.evolves_from_species.name === this.state.name) {\r\n          this.setState({nextEvolution: data.name})\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  getPrevEvolution(number) {\r\n    if (number > 1) {\r\n      fetch('https://pokeapi.co/api/v2/pokemon-species/' + (number) + '/')\r\n      .then(results => {\r\n        return results.json();\r\n      })\r\n      .then(data => {\r\n        if (data.evolves_from_species) {\r\n          this.setState({previousEvolution: data.evolves_from_species.name})\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let pData = this.fetchPokemon(this.state.number);\r\n    pData.then(() => {\r\n      this.getPrevEvolution(this.state.number);\r\n      this.getNextEvolution(this.state.number);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className={\"p-container \" + this.state.primaryType + (this.state.secondaryType !== \"N/A\" ? \"-\" + this.state.secondaryType : \"\")}>\r\n        <div className=\"container\">\r\n          <div className=\"row p-aligner\">\r\n            <div className=\"col-md-5\">\r\n              <PokemonImage name={this.state.name} number={this.state.number} />\r\n            </div>\r\n            <div className=\"col-md-6 offset-md-1\">\r\n              <PokemonData\r\n                name={this.state.name}\r\n                number={this.state.number}\r\n                primaryType={this.state.primaryType}\r\n                secondaryType={this.state.secondaryType}\r\n                previousEvolution={this.state.previousEvolution}\r\n                nextEvolution={this.state.nextEvolution}\r\n                height={this.state.height}\r\n                weight={this.state.weight}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonContainer;\r\n","import React from 'react';\nimport './App.css';\nimport PokemonContainer from './PokemonContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PokemonContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}