{"version":3,"sources":["PokemonData.js","PokemonImage.js","PokemonContainer.js","App.js","serviceWorker.js","index.js"],"names":["PokemonImage","_ref","name","number","primaryType","secondaryType","react_default","a","createElement","className","imageUrl","src","alt","height","PokemonContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","previousEvolution","nextEvolution","weight","_this2","fetch","then","results","json","data","type","types","slot","setState","src_PokemonImage_0","src_PokemonData","Component","App","src_PokemonContainer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAWeA,SARM,SAAAC,GAAgD,IAA9CC,EAA8CD,EAA9CC,KAA8CD,EAAxCE,OAAwCF,EAAhCG,YAAgCH,EAAnBI,cAChD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,iCAAwBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaP,OCM5CF,SATM,SAAAC,GAAoB,IAAlBE,EAAkBF,EAAlBE,OAAQD,EAAUD,EAAVC,KACzBQ,EAAW,iDAAiDP,EAAO,OACvE,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKD,EAAUE,IAAKT,EAAS,MAAQD,EAAMW,OAAO,WCmD9CC,qBApDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXpB,KAAM,GACNC,OAAQ,EACRC,YAAa,GACbC,cAAe,GACfkB,kBAAmB,OACnBC,cAAe,OACfX,OAAQ,IACRY,OAAQ,KAVEV,mFAcM,IACdb,EAAME,EAAaC,EAAeQ,EADpBa,EAAAR,KAC4BO,EAAS,OACvDE,MAAM,qCAAuCT,KAAKI,MAAMnB,OAAS,KAChEyB,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SAEhBF,KAAK,SAAAG,GACJ,IAAK,IAAIC,KAAQD,EAAKE,MACU,IAA1BF,EAAKE,MAAMD,GAAME,KACnB7B,EAAgB0B,EAAKE,MAAMD,GAAMA,KAAK9B,KAEtCE,EAAc2B,EAAKE,MAAMD,GAAMA,KAAK9B,KAGxCW,EAASkB,EAAKlB,OACdY,EAASM,EAAKN,OACdvB,EAAO6B,EAAK7B,KACZwB,EAAKS,SAAS,CAACjC,KAAMA,EAAMW,OAAQA,EAAQY,OAAQA,EAAQpB,cAAeA,EAAeD,YAAaA,uCAMxG,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAclC,KAAMgB,KAAKI,MAAMpB,KAAMC,OAAQe,KAAKI,MAAMnB,UAE1DG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAC6B,EAAD,CAAanC,KAAMgB,KAAKI,MAAMpB,iBA7CXoC,cCOhBC,MARf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.5c1fcf7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PokemonData.css';\r\n\r\nconst PokemonImage = ({name, number, primaryType, secondaryType}) => {\r\n  return(\r\n    <div className=\"data-container\">\r\n      <h2>Pokemon of the Day: <span className=\"name-span\">{name}</span></h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonImage;\r\n","import React from 'react';\r\nimport './PokemonImage.css';\r\n\r\nconst PokemonImage = ({number, name}) => {\r\n  let imageUrl = \"https://pokeres.bastionbot.org/images/pokemon/\"+number+\".png\"\r\n  return(\r\n    <div className=\"p-image\">\r\n      <img src={imageUrl} alt={number + \" - \" + name} height=\"350\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonImage;\r\n","import React, { Component, } from 'react';\r\nimport PokemonData from './PokemonData';\r\nimport PokemonImage from './PokemonImage';\r\nimport './PokemonContainer.css';\r\n\r\nclass PokemonContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      number: 2,\r\n      primaryType: '',\r\n      secondaryType: '',\r\n      previousEvolution: 'None',\r\n      nextEvolution: 'None',\r\n      height: '0',\r\n      weight: '0'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let name, primaryType, secondaryType, height, weight = 'None';\r\n    fetch('https://pokeapi.co/api/v2/pokemon/' + this.state.number + '/')\r\n    .then(results => {\r\n      return results.json();\r\n    })\r\n    .then(data => {\r\n      for (let type in data.types) {\r\n        if (data.types[type].slot === 2) {\r\n          secondaryType = data.types[type].type.name;\r\n        } else {\r\n          primaryType = data.types[type].type.name;\r\n        }\r\n      }\r\n      height = data.height;\r\n      weight = data.weight;\r\n      name = data.name;\r\n      this.setState({name: name, height: height, weight: weight, secondaryType: secondaryType, primaryType: primaryType});\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"p-container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 align-right\">\r\n            <PokemonImage name={this.state.name} number={this.state.number} />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <PokemonData name={this.state.name} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonContainer;\r\n","import React from 'react';\nimport './App.css';\nimport PokemonContainer from './PokemonContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PokemonContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}